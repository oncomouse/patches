diff --git a/shod.c b/shod.c
index 41ce825..5cab20c 100644
--- a/shod.c
+++ b/shod.c
@@ -6,6 +6,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <sys/stat.h>
 #include <X11/Xlib.h>
 #include <X11/Xatom.h>
 #include <X11/Xproto.h>
@@ -573,6 +574,11 @@ static char *wmname;
 static char *xrm;
 volatile sig_atomic_t running = 1;
 
+static const char autostartblocksh[] = "autostart_blocking.sh";
+static const char autostartsh[] = "autostart.sh";
+static const char shoddir[] = "shod";
+static const char localshare[] = ".local/share";
+
 #include "config.h"
 
 /* show usage and exit */
@@ -6468,6 +6474,83 @@ cleanfontset(void)
 	XFreeFontSet(dpy, theme.fontset);
 }
 
+void
+runautostart(void)
+{
+	char *pathpfx;
+	char *path;
+	char *xdgdatahome;
+	char *home;
+	struct stat sb;
+
+	/* highly unlikely that this will happen */
+	if ((home = getenv("HOME")) == NULL)
+		return;
+
+	/* if $XDG_DATA_HOME is set and not empty, use $XDG_DATA_HOME/shod,
+	 * otherwise use ~/.local/share/shod as autostart script directory
+	 */
+	xdgdatahome = getenv("XDG_DATA_HOME");
+	if (xdgdatahome != NULL && *xdgdatahome != '\0') {
+		/* space for path segments, separators and nul */
+		pathpfx = calloc(1, strlen(xdgdatahome) + strlen(shoddir) + 2);
+
+		if (sprintf(pathpfx, "%s/%s", xdgdatahome, shoddir) <= 0) {
+			free(pathpfx);
+			return;
+		}
+	} else {
+		/* space for path segments, separators and nul */
+		pathpfx = calloc(1, strlen(home) + strlen(localshare)
+		                     + strlen(shoddir) + 3);
+
+		if (sprintf(pathpfx, "%s/%s/%s", home, localshare, shoddir) < 0) {
+			free(pathpfx);
+			return;
+		}
+	}
+
+	/* check if the autostart script directory exists */
+	if (! (stat(pathpfx, &sb) == 0 && S_ISDIR(sb.st_mode))) {
+		/* the XDG conformant path does not exist or is no directory
+		 * so we try ~/.shod instead
+		 */
+		char *pathpfx_new = realloc(pathpfx, strlen(home) + strlen(shoddir) + 3);
+		if(pathpfx_new == NULL) {
+			free(pathpfx);
+			return;
+		}
+		pathpfx = pathpfx_new;
+
+		if (sprintf(pathpfx, "%s/.%s", home, shoddir) <= 0) {
+			free(pathpfx);
+			return;
+		}
+	}
+
+	/* try the blocking script first */
+	path = calloc(1, strlen(pathpfx) + strlen(autostartblocksh) + 2);
+	if (sprintf(path, "%s/%s", pathpfx, autostartblocksh) <= 0) {
+		free(path);
+		free(pathpfx);
+	}
+
+	if (access(path, X_OK) == 0)
+		system(path);
+
+	/* now the non-blocking script */
+	if (sprintf(path, "%s/%s", pathpfx, autostartsh) <= 0) {
+		free(path);
+		free(pathpfx);
+	}
+
+	if (access(path, X_OK) == 0)
+		system(strcat(path, " &"));
+
+	free(pathpfx);
+	free(path);
+}
+
 /* shod window manager */
 int
 main(int argc, char *argv[])
@@ -6519,6 +6602,7 @@ main(int argc, char *argv[])
 	initroot();
 	inittheme();
 	initdock();
+	runautostart();
 
 	/* set up list of monitors */
 	monupdate();
